@page "/"
@rendermode InteractiveServer

@* TODO: русские названия убрать *@

@inherits TestFillOrders
@inject ContextMenuService contextMenuService
@inject DialogService dialogService

@using ЗаданиеТестСтажировкаМагнитПриложениеBlazor.Components.Pages.Popup

<PageTitle>Home</PageTitle>

<RadzenContextMenu />
<RadzenDialog />

<h1>Hello, world!</h1>

Welcome to your new app.

<RadzenDataGrid Data="@Orders" TItem="Order" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedOrder CellContextMenu="OnCellContextMenuFunc">
    <Columns>
        <RadzenDataGridColumn TItem="Order" Property="Manufacturer.Name" Title="Наименование товара" />
        <RadzenDataGridColumn TItem="Order" Property="Product.Name" Title="Наименование товара" />
        <RadzenDataGridColumn TItem="Order" Property="Unit" Title="Ед. измерения" />
        <RadzenDataGridColumn TItem="Order" Property="CountOfProduct" Title="Количество" />
        <RadzenDataGridColumn TItem="Order" Property="OrderDate" Title="Дата заказа" />
        <RadzenDataGridColumn TItem="Order" Property="LoadDate" Title="Дата отгрузки" />
    </Columns>
</RadzenDataGrid>

@code {
    IList<Order> selectedOrder; 

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        selectedOrder = Orders.Take(1).ToList();
    }

    void OnCellContextMenuFunc(DataGridCellMouseEventArgs<Order> args)
    {
        selectedOrder = new List<Order>() { args.Data };

        contextMenuService.Open(args,
            new List<ContextMenuItem>
            {
                new ContextMenuItem() { Text = "Изменить целевое значение", Value = 1},
                new ContextMenuItem() { Text = "Изменить целевой объем", Value = 2}
            }, (e) =>
            {
                switch(e.Value)
                {
                    case 1:
                        ShowWin1CelValue(args.Data.Id);
                        break;
                    case 2:
                        ShowWin2CelVolume(args.Data.Id);
                        break;
                    default:
                        dialogService.Alert("Функция неизвестна!", "Ошибка");
                        break;
                }                
            });
    }
        
    async Task ShowWin2CelVolume(int order_ID)
    {
        await dialogService.OpenAsync<CorrectOrderByVolume>("Заказ ",
        new Dictionary<string, object>() { { "order_ID", order_ID } },
        new DialogOptions() { Width = "750px", CloseDialogOnOverlayClick = true, Left = "20px" });
    }

    async Task ShowWin1CelValue(int order_ID)
    {
        await dialogService.OpenAsync<CorrectOrderByGoods>("Заказ ",
        new Dictionary<string, object>() { { "order_ID", order_ID } },
        new DialogOptions() { CloseDialogOnOverlayClick = true, Left = "20px" });
    }
}